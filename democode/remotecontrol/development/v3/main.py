########################
# REMOTE NAO CONTROL
# April 2012 - Hessel van der Molen
# (c) Dutch Nao Team, licensed under GNU-GPL v3.0 
#
# HOW TO USE:
# 1) Make sure you have installed:
#   - Python 2.7
#   - Naoqi SDK 12.3    (for python 2.7)
#   - Pygame            (for Python 2.7)
# 2) Determine the type of input device you want to use (keyboard, joystick..)
# 3) Check if <inputdevice>.py exists in the 'lib' directory
#           (if not, you have to create it yourself)
# 4) Determine the input-processor & motion-files
#           (you can made these yourself, or use the defaults in 'defaults')
# 5) Connect Nao & Computer to same network
# 6) get Nao-ipadress
# 7) In terminal, goto the dir containing the above described files 
# 8) run: 
#      terminal> python main.py <InputDevice> <EventProcessFile> <NaoIPadress> [optional: <inputID>]
# 7) enjoy :)
#
import sys
import platform
import os
import time
import pygame

##########################
##      CLASSES
#############

class termOutput:
    cmdDict = {}
    cmdIdx = 0
    cmdSize = 10
    buttonDefinition = None
    
    def __init__(self, cmdSize, buttonDefinition):
        self.cmdSize = cmdSize
        self.buttonDefinition = buttonDefinition
        self.clear()
        
    #display a message that the cmd is executing...
    def execute(self, cmd):
        self.cmdDict[self.cmdIdx] = cmd
        if len(self.cmdDict) > self.cmdSize:
            del self.cmdDict[self.cmdIdx - self.cmdSize]
        self.refresh()
    
    #display a message that the cmd is executed
    def done(self):
        self.refreshLine()
        #increase cmd-index
        self.cmdIdx += 1

    #display the last 'cmdSize' commands from command-list
    # --> if 'cmdSize' = -1, all commands are shown
    def refresh(self):
        self.clear()
        
        sys.stdout.write('\n')
        sys.stdout.write("   --------- REMOTE NAO CONTROL --------- " + '\n')
        sys.stdout.write("           http://dutchnaoteam.nl         " + '\n')
        sys.stdout.write("   -------------------------------------- " + '\n')
        sys.stdout.write('\n')
        sys.stdout.write("  Button Usage for '[" + sys.argv[1] + ", " + sys.argv[2]+  "]': \n")
        sys.stdout.write( self.buttonDefinition() )
        sys.stdout.write('\n')
        sys.stdout.write("   -------------------------------------- " + '\n')
        
        for i in self.cmdDict:
            sys.stdout.write(self.formatLine(i))
            if (i != self.cmdIdx):
                sys.stdout.write(" Done" + '\n')
        
    def refreshLine(self):
        sys.stdout.write('\r' + self.formatLine(self.cmdIdx) + " Done" + '\n')
        self.waiting()
    
    def waiting(self):
        sys.stdout.write("  Ready for input...")
        
    def formatLine(self,idx):
        line = "  [" + str(idx) + "]" + '\t'
        line += "Sending command: '"
        line += self.cmdDict[idx]
        line += "' ..."
        return line
    
    #clear display
    def clear(self):
        if platform.system() == 'Windows':
            os.system('cls')
        else:
            os.system('clear')
            
##########################
##      SYSTEM CALL
#############

def listFiles(dir):
    sys.path.append(dir)
    subdirlist = []
    for item in os.listdir(dir):
        founditem = os.path.join(dir,item)
        if not os.path.isfile(founditem):
            subdirlist.append(founditem)
        for subdir in subdirlist:
            listFiles(subdir) 
            
            
if (len(sys.argv) <= 3):
    sys.stdout.write( '\n')
    sys.stdout.write( "Usage:" + '\n\n')
    sys.stdout.write( "bash> python main.py <InputDevice> <EventProcessFile> <MotionFile> <NaoIPadress> [optional: <inputID>]" + '\n')    
    sys.stdout.write( " <InputDevice>     : type of input to read, e.g. 'keyboard' or 'joystick'" + '\n')
    sys.stdout.write( " <EventProcessFile>: file name of file which process the input generated by <InputDevice>, e.g. 'keyDefault'" + '\n')
    sys.stdout.write( " <NaoIPadress>     : ip adress of Nao, e.g. 192.168.0.24" + '\n')
    sys.stdout.write( " <inputID>         : optional, ID of input-object to use when multiple are connected" + '\n')
    sys.stdout.write( '\n')
else: 
    sys.stdout.write( "> Searching folders in current directory... " )
    listFiles(os.getcwd())
    sys.stdout.write( "done" + '\n')   
    
    sys.stdout.write( "> Importing naoqi... " )
    from naoqi import ALProxy
    sys.stdout.write( "done" + '\n')

    sys.stdout.write( "> Setting connection data: " + '\n' )
    IPADRESS = sys.argv[3]
    PORT = 9559

    try:
        sys.stdout.write( ">>> setting motion proxy... " + '\n' )
        motionProxy = ALProxy("ALMotion", IPADRESS, PORT)
        sys.stdout.write( ">>> setting motion proxy... done" + '\n' )
        sys.stdout.write( ">>> setting pose proxy... " )
        poseProxy = ALProxy("ALRobotPose", IPADRESS, PORT)
        sys.stdout.write( "done" + '\n')    
    except Exception, ee:
        sys.stdout.write( '\n>> ' + str(ee) + '\n\n')
        sys.stdout.write( "Error: Cannot connect to Nao" + '\n')
        exit()
    
    sys.stdout.write( "> Importing event-process file..." + '\n')
    try:
        process = __import__(sys.argv[2])
    except ImportError, ee:
        sys.stdout.write( '\n>> ' + str(ee) + '\n\n')
        sys.stdout.write( "Error: Event-Process file '" + sys.argv[2] + "' does not exist." + '\n')
        exit()        
    except SyntaxError, ee: 
        sys.stdout.write( '\n>> ' + str(ee) + '\n\n')
        sys.stdout.write( "Error: Event-Process file '" + sys.argv[2] + "' has syntax error." + '\n')
        exit()
            
    if (not hasattr(process, "init")):
        sys.stdout.write("Error: Event-Process File '" + sys.argv[2] + "' does contain the function: 'init'" + '\n')
        exit()
    elif (not hasattr(process, "buttonDefinition")):
        sys.stdout.write("Error: Event-Process File '" + sys.argv[2] + "' does contain the function: 'buttonDefinition'" + '\n')
        exit()
    elif (not hasattr(process, "processEvent")):
        sys.stdout.write("\nError: Event-Process File '" + sys.argv[2] + "' does contain the function: 'processEvent'" + '\n')
        exit()
        
    process.init(motionProxy, poseProxy)

    sys.stdout.write( "> Importing event-process file... done" + '\n')

    sys.stdout.write( "> Initializing input-system..." + '\n')
    pygame.init()
    try:
        input = __import__(sys.argv[1])
        function = "init" + sys.argv[1]
        
        if (not hasattr(input, function)):
            sys.stdout.write("\nError: input-system '" + sys.argv[1] + "' does contain the function: '" + function + "'" + '\n')
            exit()
        elif (not hasattr(input, "getAction")):
            sys.stdout.write("\nError: input-system  '" + sys.argv[1] + "' does contain the function: 'getAction'" + '\n')
            exit()
 
        #init input
        setGlobal = getattr(input, "setGlobal")
        setGlobal(pygame, sys)
        
        initFunction = getattr(input, function)
        initFunction()
    except Exception, ee:
        sys.stdout.write( '\n>> ' + str(ee) + '\n\n')
        sys.stdout.write( "Error: can't load input system: '" + sys.argv[1] + "'" + '\n')
        exit()
    sys.stdout.write( "> Initializing input-system... done" + '\n')
    
    output = termOutput(15, process.buttonDefinition)
    output.refresh()
    output.waiting()

    #start reading input
    while True:
        action = input.getAction()
        if (action == "quit"): 
            sys.stdout.write( "Quitting system" + '\n')
            pygame.quit()
            exit()
        elif ( not(action == None)):
            process.processEvent(output, action)
        